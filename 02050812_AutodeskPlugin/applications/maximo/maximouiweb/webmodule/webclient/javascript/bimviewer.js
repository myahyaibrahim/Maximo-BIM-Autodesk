/*
 * Licensed Materials - Property of IBM
 * 5737-M66, 5900-AAA, 5900-AMG
 * (C) Copyright IBM Corp. 2009, 2025 All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication, or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 */
//**********************************************************************
// Manage the model file definitions pushed from Maximo
// Maximo pushes scripts that insert model into the list
//**********************************************************************
"use strict";

function ModelDef(
	modelId, location, binding, title, url, attribClass, attribName, paramClass, 
	paramName, defaultView, selectionMode, siteId, mboKey, showModel, priority
) {
	this.modelId       = modelId;
	this.location      = location;
	this.binding       = binding;
	this.title         = title;
	this.url           = url;
	this.attribClass   = attribClass;
	this.attribName    = attribName;
	this.paramClass    = paramClass;
	this.paramName     = paramName;
	this.defaultView   = defaultView;
	this.selectionMode = selectionMode;
	this.siteId        = siteId;
	this.mboKey        = mboKey;
	this.showModel     = showModel;
	this.priority      = priority;
}


//**********************************************************************
// Manage a list of all the models that are defined for the current
// location.  
// - Populate the model selection combobox
// - Manage select events for the model combobox
// When a new model is selected, if the currently selected item is
// available in the new model, then transfer the selection to the new
// model
//**********************************************************************
function ModelManager( 
		ctrlId, 		// Id of Navisworks ActiveX control
		modelId, 		// Id of combobox with the list of available models
		viewer,			// Wrapper class for viewer plugin
		multiSelect		// Function to call for multi select
) {  
	this.ctrlId      = ctrlId;
	this.modelId     = modelId;
	this.viewer      = viewer;
	this.value       = null;
	this.isAutoZoom  = true;
	this.multiSelect = multiSelect;

	
	// Array of all valid model definitions for the current location or asset
	// This is populated by a script generated by the component class
	this.modelList = new Array();
	
	// Track the currently selected model to control the Find parameters
	this.currentModel = null;

	this.resetModelList = function ()
	{
		this.modelList = new Array();
	};

	//**********************************************************************
	// Add a model definition to the model manager.
	// NOTE:  This function is called by code generated in the BuildingModel
	//        Jave class
	//**********************************************************************
	this.addModel = function ( 
			modelId, location, binding, title, url, attribClass, attribName, paramClass, 
			paramName, defaultView, selectionMode, siteId, mboKey, showModel, priority
	) {
		var model = new ModelDef( modelId, location, binding, title, url, 
				                  attribClass, attribName, paramClass, paramName, 
				                  defaultView, selectionMode, siteId, mboKey, showModel, priority );
		this.modelList[ this.modelList.length ] = model;
	};

	this.getCurrentModel = function()
	{
		return this.currentModel;
	};

	this.populateModelList = function( value )
	{
		this.value = value;
		var modelCtrl;
		modelCtrl = document.getElementById( this.modelId );
		
		var ctrl;
		ctrl = document.getElementById( this.ctrlId );
		if( ctrl == null ) 
		{
			return;
		}

		let modelPriority = checkListPriority(this.modelList);
		let applicationID = getAppId();
		if (modelPriority === 0 && (applicationID === 'location' || applicationID === 'plusxlocation')) {
			if( this.modelList.length > 0 )
				{
					this.modelList.sort((a, b) => {
						if (b.location != this.modelList[0].mboKey) {
							return -1;
						}
							return 0;
					});
				}
		}
		
		// LMV doens't use the top toolbar and this isn't created until after the model is loaded
		if( modelCtrl != null )
		{
			for( var i = 0; i < modelCtrl.options.length; i++ ) 
			{
				modelCtrl.options[i] = null;
			}
			modelCtrl.length = 0;

			for( var i = 0; i < this.modelList.length; i++ )
			{
				var opt;
				opt = document.createElement( "OPTION" );
				opt.value = this.modelList[i].modelId;				
				opt.text = this.modelList[i].title;
				modelCtrl.add( opt );
			}
		}
		
		for( var i = 0; this.currentModel != null && i < this.modelList.length; i++ )
		{
			if( this.modelList[i].modelId == this.currentModel.modelId)
			{

				// Needed to cause an update when the URL is edited for an existing
				// model through the model specification dialog
				if( this.modelList[i].url != this.currentModel.url)
				{
					if( modelCtrl != null ) { modelCtrl.selectedIndex = i; }

					this.currentModel = this.modelList[i];
					this.viewer.setCurrentModel( this.currentModel );
					this.viewer.loadFile( this.currentModel.url );

					return;
				}
				
			}
		}

		if( this.modelList.length > 0 )
		{
			var displayModel = this.modelList[0].showModel;
			var modelHasURL = this.modelList[0].url.trim().length != 0;
			if(displayModel && modelHasURL){
				setModelVisibility(displayModel && modelHasURL);
				this.currentModel = this.modelList[0];
				this.viewer.setCurrentModel( this.currentModel );
				this.viewer.loadFile( this.currentModel.url );
				this.viewer.selectValue( value, true && this.isAutoZoom );
			}else {
				setModelVisibility(displayModel && modelHasURL);
				this.viewer.selMgr.selection = "";
				this.viewer.selMgr.updateToolbar();
			}
		}

	};

	function setModelVisibility( isVisibile )
	{
		var msg   = document.querySelector( '[id$="_bimviewer_model_msgTbl"]' );
		var model = document.querySelector( '[id$="_bimviewer_model_modelTbl"]' );
		if( msg == null || model == null )
		{
			return;
		}
		if( isVisibile )
		{
			msg.style.visibility   = "hidden";
			model.style.visibility = "visible";
		}
		else
		{
			msg.style.visibility   = "visible";
			model.style.visibility = "hidden";
		}
	};

	function checkListPriority(modelList)
	{
		let priority = 0;
		for( var i = 0; i < modelList.length; i++ ) {
			if( modelList[i].priority > 0) {
				priority =  1;
			} 
		}
		return priority;
	};

	function getAppId()
	{
		return window.parent.APPID != undefined ? window.parent.APPID : window.parent[0].APPID
	};
	
	this.select = function( zoom )
	{
		if( this.value != null )
		{  
			if( typeof this.value == "string" )
			{
				this.viewer.selectValue( this.value, zoom && this.isAutoZoom );
			}
		}
		this.value = "";
	};
		

	// On select event for models combobox
	// Select a saved view from the model 
	this.selectModel = function( modelCB, ctrl )
	{
		if( ctrl == null ) return;
		var selection;
		if( this.currentModel != null )
		{
			selection   = this.viewer.getSelection( 1 );
			var selList = this.viewer.getSelectionList();
		}

		var modelCtrl = document.getElementById( this.modelId );
		var match = false;
		for( var i = 0; i < this.modelList.length; i++ )
		{
			if( modelCtrl.value == this.modelList[i].modelId )
			{
				this.currentModel = this.modelList[i];
				this.viewer.setCurrentModel( this.currentModel );
				this.viewer.loadFile( this.modelList[i].url );
				match = true;
			}
		}

		// If a new view is selected, try and restore the selection 
		if( (!match) || selection == null || selection == "" )
		{
			return;
		}
		this.viewer.selectValue( selection, true && this.isAutoZoom );
		if( selList != undefined && selList.length > 1 )
		{
			this.multiSelect( ctrl, selList, selection, false && this.isAutoZoom );
		}
	};
	
	this.multiSelect = function( 
		ctrl,
		selectionList,		// An array of items to select
		selection,			// The element in the array that matches the current Maximo item
		zoomToContext
	) {
		if( ctrl == undefined || ctrl == null ) return;

		// Handle an empty selection list
		if( selectionList == null || selectionList.length == 0 )
		{
			viewer.clearSelection( ctrl );
			selMgr.updateSelectionSet( ctrl );
			return;
		}
		
		var count = viewer.selectValueList( selectionList, zoomToContext );

		selMgr.updateSelectionSet( ctrl );
		
		return count;
    };
	
	this.setAutoZoom = function(
		enable
	) {
		this.isAutoZoom = enable;		
		if( this.viewer.setAutoZoom != null )
		{
			this.viewer.setAutoZoom( enable );
		}
	};
}

/**********************************************************************/
//Centralize tracking of the current selection and filter for changes
/**********************************************************************/
	function SelectionManager( 
		ctrl, 
		viewer, 
		onChange			// Function to call when the selection changes 
	) {
		this.selection     = "";
		this.selectionList = new Array();
		this.index         = 1;
		this.count         = 0;
		this.ctrl          = ctrl;
		this.viewer        = viewer;
		this.onChange      = onChange;
		this.isMultiSelect = false; 

		// List of UI elements that need to be disabled if the selection is empty
		this.selectionSensitiveItems = new Array();

		this.AddSelectionSensitiveItem = function( item )
		{
			this.selectionSensitiveItems[ this.selectionSensitiveItems.length ] = item;
		};

		this.setMultiSelect = function( multiSelect )
		{
			if( multiSelect != this.isMultiSelect )
			{
				viewer.enableMultiSelect( multiSelect );
			}
		};

		
		// Call by any NavisWOrks function that can change the current selection
		this.updateSelectionSet = function( ctrl ) 
		{
			if( ctrl == undefined )
			{
				return;
			}
			
			var newSelectionList = viewer.getSelectionList();
			var count = newSelectionList.length;

			var newSelection     = "";
			var newIdx = 0;
			if( count > 0  )
			{
				newSelection = newSelectionList[ count-1 ];
				newIdx = viewer.getItemIndex( newSelection );
			}
			
			// Its not clear i the order of the selection set returned from
			// NavisWorks is stable
			var changed = false;
			if( newSelectionList.length != this.selectionList.length )
			{
				changed = true;
			}
			for( var i1 = 0; i1 < newSelectionList.length && !changed; i1++ )
			{
				var match = false;
				for( var i2 = 0; i2 < this.selectionList.length && !match; i2++ )
				{
					if( newSelectionList.length[i1] == this.selectionList[i2] )
					{
						match = true;
					}
					if( match ) continue;
					changed = true;
				}
			}
			
			if( newSelection == null ) newSelection == "";

			if( !changed )
			{
				if(    newSelection == this.selection 
					&& newIdx == this.index )
				{
					return;				
				}
			}
			
			this.selectionList = newSelectionList;
			this.selection     = newSelection;
			this.index         = newIdx;
			this.count         = count;
			this.updateToolbar();
			
			this.onChange( ctrl, this.selectionList, this.selection, this.count, this.index );
			this.viewer.onSelectionChange( ctrl, this.selectionList, this.selection, this.count, this.index );
		};
		
		this.clear = function( ctrl )
		{
			viewer.clearSelection();
			this.updateSelectionSet( ctrl );
		};
		
		
		this.update = function( ctrl ) 
		{
			var selection;
			var oldCount = this.count;
			if( ctrl != undefined )
			{
				this.count = viewer.getSelectionCount();
				if( this.index > this.count )
				{
					this.index = this.count;
				}
				if( this.index < 1 && this.count > 0 )
				{
					this.index = 1;
				}
				selection = viewer.getSelection( this.index );
				var idx = viewer.getItemIndex( selection );
				if( idx > 0 ) 
				{
					 this.index = idx;
				}
				else
				{
					selection = "";
				}
			}
			else
			{
				this.index = 0;
			}
			if( selection == null ) selection == "";
			if( selection != this.selection || oldCount != this.count )
			{
				this.selection = selection;
				this.updateToolbar();
				this.onChange( ctrl, this.selectionList, this.selection, this.count, this.index );
				this.viewer.onSelectionChange( ctrl, this.selectionList, this.selection, this.count, this.index );
			}
		};

		this.selectionPrev = function()
		{
			if(  this.index > 1 )
			{
				this.index--;
			}

			viewer.focusOnSelectedItem( this.index );
			this.update( this.ctrl );
		};
		
		this.selectionNext = function()
		{
			var count = viewer.getSelectionCount();
		
			this.index ++;
			if( this.index  > count )
			{
				this.index = count;
			}

			viewer.focusOnSelectedItem( this.index );
			this.update( this.ctrl );
		}
		
		this.selectionByIndex = function(
			idx
		) {
			if( idx < 1 )
			{
				idx = 1;
			}
			else
			{
				var count = viewer.getSelectionCount();
				if( this.index  > count )
				{
					idx = count;
				}
			}
			this.index = idx;
			viewer.focusOnSelectedItem( this.index );
			this.update( this.ctrl );
		}
		
		this.updateToolbar = function()
		{
			var enableState = "visible";
			if( this.selection == "" )
			{
				enableState = "hidden";
			}
			for( var i = 0; i < this.selectionSensitiveItems.length; i ++ )
			{
				var itemId = this.selectionSensitiveItems[i];
				if( itemId != null && itemId != "" )
				{
				    var ell = document.getElementById( itemId );
				    if( ell != null )
				    {
						ell.style.visibility = enableState;
				    }
				}
			}
		};
	}
	
	/**********************************************************************/
	// Messages back to the Maximo server
	//
	// Note: some actions are sent driectly from HTML button definitions
	/**********************************************************************/
	function maximoInterface(
		renderId
	) {
		this.renderId = renderId;

		// When multi-select is enabled (for lookup mode) sends a message to
		// Maximo each time the selection set is changed
		this.maxMultiSelect = function( selectionList, selection )
		{
			if( modelMgr == null ) return;
			var model = modelMgr.getCurrentModel();
			if( model == null ) return;
			if( selectionList.length == 0  )
			{
				selection = model.binding;
			}
	
			var value = model.location + ";" + selection + ";";
			for( var i = 0; i < selectionList.length; i++ )
			{
				value = value + selectionList[i] + ";";
			}
			
			curMultiSelect = value;
			maxMultiSelectDelay();
		}

		// Sends a message to Maximo to search for open work 
		this.maxSearchWorkOrders = function()
		{
			if( modelMgr == null ) return;
			var model = modelMgr.getCurrentModel();
			if( model == null ) return;
			window.parent.sendEvent(  "bim_wopms_byloc", this.renderId, model.location );
		}
		
		//Sends and event to the server to store the use selected size in the HTTP context
		this.maxSetResizeOption = function( option )
		{
			window.parent.sendEvent(  "eventRezise", this.renderId, option );
		}
	
		//Sends and event to the server to store the use selected size for the viewer on
		// dialogs in the HTTP context
		this.maxSetResizeDlgOption = function( option )
		{
			window.parent.sendEvent(  "eventReziseDlg", this.renderId, option );
		}
		
		//  Send a message to Maximo to add the current selection to a ticket or work order
		this.maxSelectionAdd = function()
		{
			window.parent.sendEvent(  "eventAddSelection", this.renderId );
		}
	
		//  Send a message to Maximo to remove the current selection to a ticket or work order
		this.maxSelectionRemove = function()
		{
			window.parent.sendEvent(  "eventRemoveSelection", this.renderId );
		}
	
		// Send a message to Maximo to create a new system from the current selection
		this.maxSystemsDisplay = function()
		{
			if( modelMgr == null ) return;
			var model = modelMgr.getCurrentModel();
			if( model == null ) return;
	
			var sel = this.getEffectiveLocation();
			if( sel == "" ) return;
			sel = model.location + ";" + sel  + ";";
			window.parent.sendEvent(  "BIM_DS", this.renderId, sel );
		}
	
		// Send a message to Maximo to create a new system from the current selection
		this.maxSystemsNew = function()
		{
			if( modelMgr == null ) return;
			var model = modelMgr.getCurrentModel();
			if( model == null ) return;
			var value = model.location + ";" + model.binding  + ";";
			window.parent.sendEvent(  "BIM_NS", this.renderId, value );
			selMgr.setMultiSelect( false );
		}
	
		// Send a message to Maximo to create a new system from the current selection
		this.maxSystemsUpdate = function()
		{
			if( modelMgr == null ) return;
			var model = modelMgr.getCurrentModel();
			if( model == null ) return;
			
			var value = model.location + ";" + model.binding  + ";";
			window.parent.sendEvent(  "BIM_US", this.renderId, value );
			selMgr.setMultiSelect( false );
		}
	
		this.getEffectiveLocation = function()
		{
			var sel = selMgr.selection;
			if( sel == undefined || sel == null || sel == "" )
			{
				if( modelMgr == null ) return "";
				var model = modelMgr.getCurrentModel();
				if( model == null ) return "";
				sel = model.binding
			}
			return sel;
		}
	}